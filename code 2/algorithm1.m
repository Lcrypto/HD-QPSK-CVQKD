function [r,Tr] = algorithm1(N_cutoff,rho0,Kraus_p,Kraus_q,Z_0,Z_1,gamma,Gamma)
eps2 = 10^(-12);
eps1 = 10^(-7);
%B denotes the number of iteration in step I
B = 0;
%sav_rho is used to save rho generated by every iteration
sav_rho = cell([300 1]);
%sav_tr is used to save absolute value how much the function changes every iteration
sav_tr = zeros(1,300);
%tr is used to save how much the function changes every iteration
tr = zeros(1,300);
rho = rho0;
while 1
    grad_f_p = (G_perturb_deg(logm(G_perturb(rho,eps2,Kraus_p,N_cutoff))/log(2),eps2,Kraus_p)-...
            G_perturb_deg(logm(Z_0*G_perturb(rho,eps2,Kraus_p,N_cutoff)*Z_0+Z_1*G_perturb(rho,eps2,Kraus_p,N_cutoff)*Z_1)/log(2),eps2,Kraus_p)).';
    grad_f_q = (G_perturb_deg(logm(G_perturb(rho,eps2,Kraus_q,N_cutoff))/log(2),eps2,Kraus_q)-...
            G_perturb_deg(logm(Z_0*G_perturb(rho,eps2,Kraus_q,N_cutoff)*Z_0+Z_1*G_perturb(rho,eps2,Kraus_q,N_cutoff)*Z_1)/log(2),eps2,Kraus_q)).';
    grad_f = grad_f_p + grad_f_q;
%search for delta rho that minimize the objective function
    cvx_precision high
    cvx_begin quiet 
        variable sigm(4*(N_cutoff+1),4*(N_cutoff+1)) complex semidefinite
        minimize(real(trace(sigm.'*0.5*(grad_f+grad_f'))))
        sigm == hermitian_semidefinite(4*(N_cutoff+1));
        subject to
        trace(sigm) == 1;
        trace(sigm*(Gamma{2}.')) == gamma(2);
        trace(sigm*(Gamma{3}.')) == gamma(3);
        trace(sigm*(Gamma{4}.')) == gamma(4);
        trace(sigm*(Gamma{5}.')) == gamma(5);
        trace(sigm*Gamma{6}.') == gamma(6);
        trace(sigm*Gamma{7}.') == gamma(7);
        trace(sigm*Gamma{8}.') == gamma(8);
        trace(sigm*Gamma{9}.') == gamma(9);
        trace(sigm*Gamma{10}.') == gamma(10);
        trace(sigm*Gamma{11}.') == gamma(11);
        trace(sigm*Gamma{12}.') == gamma(12);
        trace(sigm*Gamma{13}.') == gamma(13);
        trace(sigm*Gamma{14}.') == gamma(14);
        trace(sigm*Gamma{15}.') == gamma(15);
        trace(sigm*Gamma{16}.') == gamma(16);
        trace(sigm*Gamma{17}.') == gamma(17);
        trace(sigm*Gamma{18}.') == gamma(18);
        trace(sigm*Gamma{19}.') == gamma(19);
        trace(sigm*Gamma{20}.') == gamma(20);
        trace(sigm*Gamma{21}.') == gamma(21);
        trace(sigm*Gamma{22}.') == gamma(22);
        trace(sigm*Gamma{23}.') == gamma(23);
        trace(sigm*Gamma{24}.') == gamma(24);
        trace(sigm*Gamma{25}.') == gamma(25);
        trace(sigm*Gamma{26}.') == gamma(26);
        trace(sigm*Gamma{27}.') == gamma(27);
        trace(sigm*Gamma{28}.') == gamma(28);
        trace(sigm*Gamma{29}.') == gamma(29);
        trace(sigm*Gamma{30}.') == gamma(30);
        trace(sigm*Gamma{31}.') == gamma(31);
        trace(sigm*Gamma{32}.') == gamma(32);
        trace(sigm*Gamma{33}.') == gamma(33);
    cvx_end

    %condition to stop this loop
    if strcmp(cvx_status, 'Solved') || strcmp(cvx_status, 'Inaccurate/Solved')
    else
        sigm = rho;
    end
    if abs(real(trace((sigm-rho).'*0.5*(grad_f+grad_f'))))<eps1            
        r = rho;
        Tr = real(trace((sigm-rho).'*0.5*(grad_f+grad_f')));
        break
    end
    if B>=300
        %if we still cannot reach the eps after 300 iterations we let rho
        %equals the one with the smallest absolute value
        [~,it] = min(sav_tr);
        r = sav_rho{it};
        Tr = tr(it);
        break
    end
    sav_rho{B+1} = rho;
    sav_tr(B+1) = abs(real(trace((sigm-rho).'*0.5*(grad_f+grad_f'))));
    tr(B+1) = real(trace((sigm-rho).'*0.5*(grad_f+grad_f')));
    B = B +1;
    %find appropriate lambda that minimizes perturbed keyrate function
    fun = @(lambda) rel_ent(G_perturb(lambda*sigm+(1-lambda)*rho,eps2,Kraus_p,N_cutoff)...
        ,Z_0*G_perturb(lambda*sigm+(1-lambda)*rho,eps2,Kraus_p,N_cutoff)*Z_0+Z_1*G_perturb...
        (lambda*sigm+(1-lambda)*rho,eps2,Kraus_p,N_cutoff)*Z_1)+...
        rel_ent(G_perturb(lambda*sigm+(1-lambda)*rho,eps2,Kraus_q,N_cutoff)...
        ,Z_0*G_perturb(lambda*sigm+(1-lambda)*rho,eps2,Kraus_q,N_cutoff)*Z_0+Z_1*G_perturb...
        (lambda*sigm+(1-lambda)*rho,eps2,Kraus_q,N_cutoff)*Z_1);
    options = optimset('TolX',1e-10);
    [lambda,~] = fminbnd(fun,0,1,options);   
    rho = lambda*sigm+(1-lambda)*rho;
end
end

